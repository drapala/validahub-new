[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/__pycache__/*"]

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
    "SIM105", # contextlib.suppress
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"test_*.py" = ["F401", "F811"]
"tests/*.py" = ["F401", "F811"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
exclude = [
    "migrations/",
    "venv/",
    "build/",
    "dist/",
    "tests/",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "apps/api/tests", "apps/api/src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -ra
    --strict-markers
    --cov=apps/api/src
    --cov=libs
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    -vv
"""
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "skip_ci: Skip in CI",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["apps/api/src", "libs"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "except ImportError:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
targets = ["apps", "libs"]
exclude_dirs = ["tests", "test_*.py", ".venv", "venv", "build", "dist", ".git", "__pycache__", "migrations"]
skips = []
severity = "low"
confidence = "low"

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]

# Import linter for clean architecture enforcement
[tool.import-linter]
root_package = "apps.api.src"

[[tool.import-linter.contracts]]
name = "Core layer independence"
type = "independence"
modules = [
    "apps.api.src.core",
    "apps.api.src.infrastructure",
    "apps.api.src.services",
]

[[tool.import-linter.contracts]]
name = "Core cannot import infrastructure"
type = "forbidden"
source_modules = ["apps.api.src.core"]
forbidden_modules = [
    "apps.api.src.infrastructure",
    "apps.api.src.services",
    "apps.api.src.db",
    "apps.api.src.api",
    "apps.api.src.workers",
    "apps.api.src.middleware",
    "pandas",
    "sqlalchemy",
    "fastapi",
    "aiohttp",
    "redis",
    "boto3",
]

[[tool.import-linter.contracts]]
name = "Layers respect hierarchy"
type = "layers"
layers = [
    "apps.api.src.api",
    "apps.api.src.middleware",
    "apps.api.src.workers",
    "apps.api.src.services",
    "apps.api.src.infrastructure",
    "apps.api.src.core",
    "apps.api.src.schemas",
]

[[tool.import-linter.contracts]]
name = "No circular dependencies"
type = "forbidden"
source_modules = ["apps.api.src.services"]
forbidden_modules = ["apps.api.src.infrastructure"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mutation]
# Mutation testing configuration
runner = "python -m pytest"
test_command = "pytest -x"
timeout_factor = 5
dict_synonyms = ["dict", "ordereddict", "defaultdict"]
disabled_mutators = ["decorator"]
paths_to_mutate = ["apps/api/src/core"]
paths_to_exclude = ["*/tests/*", "*/test_*.py"]
