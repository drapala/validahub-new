name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ========== BACKEND TESTS ==========
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: validahub
          POSTGRES_PASSWORD: validahub
          POSTGRES_DB: validahub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting (ruff)
      working-directory: ./backend
      run: |
        pip install ruff
        ruff check src/ tests/
    
    - name: Run type checking (mypy)
      working-directory: ./backend
      run: |
        pip install mypy types-redis types-passlib
        mypy src/ --ignore-missing-imports || true
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://validahub:validahub@localhost:5432/validahub_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        APP_ENV: test
      run: |
        pytest -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ========== FRONTEND TESTS ==========
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || true
    
    - name: Type checking
      run: npm run type-check || true
    
    - name: Run tests
      run: npm test -- --passWithNoTests || true
    
    - name: Build application
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:3001
        NEXT_PUBLIC_MOCK: "1"
      run: npm run build

  # ========== SECURITY CHECKS ==========
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check Python dependencies (safety)
      working-directory: ./backend
      run: |
        pip install safety
        safety check --json || true
    
    - name: Check npm dependencies (audit)
      run: npm audit --audit-level=high || true

  # ========== DOCKER BUILD ==========
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker image
      run: |
        cat > backend/Dockerfile << 'EOF'
        FROM python:3.11-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        docker build -t validahub-backend:test ./backend
    
    - name: Build Frontend Docker image
      run: |
        cat > Dockerfile << 'EOF'
        FROM node:20-alpine AS builder
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci
        COPY . .
        RUN npm run build
        
        FROM node:20-alpine
        WORKDIR /app
        COPY --from=builder /app/.next ./.next
        COPY --from=builder /app/public ./public
        COPY --from=builder /app/package*.json ./
        RUN npm ci --production
        CMD ["npm", "start"]
        EOF
        docker build -t validahub-frontend:test .

  # ========== CODE QUALITY ==========
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
    
    - name: Check for secrets (gitleaks)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true