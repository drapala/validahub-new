name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ========== MONOREPO BUILD & TEST ==========
  monorepo-ci:
    name: Monorepo CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: validahub
          POSTGRES_PASSWORD: validahub
          POSTGRES_DB: validahub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: apps/api/requirements.txt
    
    - name: Install Node dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Install Python dependencies
      working-directory: ./apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: pnpm run lint
    
    - name: Run type checking
      run: pnpm run typecheck
    
    - name: Run Python linting (ruff)
      working-directory: ./apps/api
      run: |
        pip install ruff
        ruff check src/ tests/
    
    - name: Run Python type checking (mypy)
      working-directory: ./apps/api
      run: |
        pip install mypy types-redis types-passlib
        mypy src/ --ignore-missing-imports || true
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://validahub:validahub@localhost:5432/validahub_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        APP_ENV: test
        NEXT_PUBLIC_API_BASE_URL: http://localhost:3001
        NEXT_PUBLIC_MOCK: "1"
      run: |
        pnpm run test:ci
        cd apps/api && pytest -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Build applications
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:3001
        NEXT_PUBLIC_MOCK: "1"
      run: pnpm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./apps/api/coverage.xml
        flags: monorepo
        name: monorepo-coverage

  # ========== SECURITY CHECKS ==========
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
    
    - name: Check Python dependencies (safety)
      working-directory: ./apps/api
      run: |
        pip install safety
        safety check --json || true
    
    - name: Check npm dependencies (audit)
      run: pnpm audit --audit-level=high || true

  # ========== DOCKER BUILD ==========
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker image
      run: |
        cat > apps/api/Dockerfile << 'EOF'
        FROM python:3.11-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        docker build -t validahub-api:test ./apps/api
    
    - name: Build Frontend Docker image
      run: |
        cat > apps/web/Dockerfile << 'EOF'
        FROM node:20-alpine AS deps
        RUN apk add --no-cache libc6-compat
        WORKDIR /app
        RUN corepack enable && corepack prepare pnpm@latest --activate
        COPY package.json pnpm-lock.yaml ./
        RUN pnpm install --frozen-lockfile
        
        FROM node:20-alpine AS builder
        WORKDIR /app
        COPY --from=deps /app/node_modules ./node_modules
        COPY . .
        RUN npm run build
        
        FROM node:20-alpine AS runner
        WORKDIR /app
        ENV NODE_ENV production
        COPY --from=builder /app/.next ./.next
        COPY --from=builder /app/public ./public
        COPY --from=builder /app/package.json ./
        COPY --from=deps /app/node_modules ./node_modules
        CMD ["npm", "start"]
        EOF
        docker build -t validahub-web:test ./apps/web

  # ========== CODE QUALITY ==========
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
    
    - name: Check for secrets (gitleaks)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true