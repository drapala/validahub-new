name: Test Suite

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Nightly mutation & performance tests

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: validahub
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: validahub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd apps/api
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock
      
      - name: Run Unit Tests
        run: |
          cd apps/api
          pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term
        continue-on-error: true  # Don't fail while we're setting up tests
      
      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://validahub:test_password@localhost:5432/validahub_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: testing
        run: |
          cd apps/api
          pytest tests/integration -v || echo "Integration tests not yet implemented"
      
      - name: Check Diff Coverage
        run: |
          cd apps/api
          # Check coverage on changed files only
          diff-cover coverage.xml --compare-branch=origin/main --fail-under=85 || echo "Diff coverage will be enforced after setup"
          
      - name: Check Directory Coverage  
        run: |
          cd apps/api
          # Critical directories must meet higher standards
          coverage report --include="src/services/*" --fail-under=90 || echo "Services coverage not yet enforced"
          coverage report --include="src/validators/*" --fail-under=95 || echo "Validators coverage not yet enforced"
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/api/coverage.xml
          flags: backend
          fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run Unit Tests
        run: |
          cd apps/web
          pnpm test:unit --run || echo "Unit tests not yet implemented"
      
      - name: Run Component Tests
        run: |
          cd apps/web
          pnpm test:components || echo "Component tests not yet implemented"
      
      - name: Type Check
        run: |
          cd apps/web
          pnpm typecheck || npx tsc --noEmit

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Install Playwright
        run: |
          cd apps/web
          npx playwright install --with-deps chromium
      
      - name: Run E2E Tests
        run: |
          cd apps/web
          pnpm test:e2e || echo "E2E tests not yet implemented"
      
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          pip install bandit safety pip-audit
      
      - name: Run Bandit (Security Linter)
        run: |
          cd apps/api
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Run Safety (Dependency Check)
        run: |
          cd apps/api
          safety check --json || true
      
      - name: Run pip-audit
        run: |
          cd apps/api
          pip-audit || true
      
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: apps/api/*-report.json
          retention-days: 30

  flaky-quarantine:
    runs-on: ubuntu-latest
    if: always()  # Run even if other jobs fail
    needs: [backend-tests, frontend-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Run Quarantined Tests
        run: |
          cd apps/api
          pip install -r requirements.txt
          # Run flaky tests separately (don't block PR)
          pytest -m flaky -v --tb=short || echo "Flaky tests failed (expected)"
          
      - name: Create Flaky Test Issues
        if: failure()
        run: |
          # Create GitHub issues for persistent flaky tests
          echo "Would create issues for flaky tests (implement with GH CLI)"

  mutation-testing:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'mutation-test')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd apps/api
          pip install -r requirements.txt
          pip install mutmut
      
      - name: Run Mutation Testing
        run: |
          cd apps/api
          # Run mutation testing on critical paths only
          mutmut run --paths-to-mutate=src/services/,src/validators/ --tests-dir=tests/unit/
          mutmut results || echo "Mutation testing completed"
          
      - name: Upload Mutation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutation-report
          path: apps/api/.mutmut-cache
          retention-days: 7