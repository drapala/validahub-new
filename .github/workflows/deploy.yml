name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/deploy.yml'

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-get-login@v2
    
    - name: Build and push Backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/validahub-backend:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/validahub-backend:$IMAGE_TAG
        docker tag $ECR_REGISTRY/validahub-backend:$IMAGE_TAG $ECR_REGISTRY/validahub-backend:latest
        docker push $ECR_REGISTRY/validahub-backend:latest
    
    - name: Build and push Frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/validahub-frontend:$IMAGE_TAG .
        docker push $ECR_REGISTRY/validahub-frontend:$IMAGE_TAG
        docker tag $ECR_REGISTRY/validahub-frontend:$IMAGE_TAG $ECR_REGISTRY/validahub-frontend:latest
        docker push $ECR_REGISTRY/validahub-frontend:latest
    
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster validahub-cluster \
          --service validahub-backend \
          --force-new-deployment
        
        aws ecs update-service \
          --cluster validahub-cluster \
          --service validahub-frontend \
          --force-new-deployment
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deploy to production ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()